import os
import logging
import warnings
import re
from dotenv import load_dotenv
from telegram import Update, ParseMode, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler, CallbackQueryHandler

from ssh_manager import SSHManager

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è paramiko –∏ telegram
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=DeprecationWarning)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
WAITING_PASSWORD = 1
TERMINAL_MODE = 2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
AUTHORIZED_USER = os.getenv('AUTHORIZED_USER')

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN environment variable is not set")

if not AUTHORIZED_USER:
    logger.warning("AUTHORIZED_USER is not set. Bot will be accessible to anyone.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SSH –º–µ–Ω–µ–¥–∂–µ—Ä–∞
ssh_manager = SSHManager()

# –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ chat_id
active_sessions = {}

def check_authorization(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–≥—É"""
    if not AUTHORIZED_USER:
        return True
    
    username = update.effective_user.username
    return username and username == AUTHORIZED_USER

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not check_authorization(update):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥
    keyboard = [
        [KeyboardButton("/terminal"), KeyboardButton("/cmd")],
        [KeyboardButton("/status"), KeyboardButton("/password")],
        [KeyboardButton("Ctrl+C"), KeyboardButton("Ctrl+D")],
        [KeyboardButton("Restart container"), KeyboardButton("Reboot")],
        [KeyboardButton("/help")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ SSH.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/terminal - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π SSH —Ç–µ—Ä–º–∏–Ω–∞–ª\n"
        "/cmd <–∫–æ–º–∞–Ω–¥–∞> - –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞\n"
        "/password - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        "/exit - –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞\n",
        reply_markup=reply_markup
    )

def connect_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /connect"""
    if not check_authorization(update):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–æ–ª—å
    if not ssh_manager.password:
        update.message.reply_text(
            "–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /password –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è."
        )
        return
    
    message = update.message.reply_text("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
    
    if ssh_manager.connect():
        message.edit_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É {ssh_manager.server_ip}")
    else:
        message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.")

def disconnect_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /disconnect"""
    if not check_authorization(update):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    chat_id = update.effective_chat.id
    
    # –ï—Å–ª–∏ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è, —É–¥–∞–ª—è–µ–º –µ—ë
    if chat_id in active_sessions:
        del active_sessions[chat_id]
    
    ssh_manager.disconnect()
    update.message.reply_text("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")

def execute_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cmd"""
    if not check_authorization(update):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    if not context.args:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.\n–ü—Ä–∏–º–µ—Ä: /cmd ls -la")
        return
    
    command = ' '.join(context.args)
    message = update.message.reply_text(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: `{command}`...", parse_mode=ParseMode.MARKDOWN)
    
    success, output = ssh_manager.execute_command(command)
    
    if success:
        # –ï—Å–ª–∏ –≤—ã–≤–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        if len(output) > 4000:
            output = output[:4000] + "...\n[–í—ã–≤–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏ –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω]"
        
        message.edit_text(
            f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:\n```\n{output}\n```",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:\n```\n{output}\n```",
            parse_mode=ParseMode.MARKDOWN
        )

def start_terminal(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    if not check_authorization(update):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–æ–ª—å
    if not ssh_manager.password:
        update.message.reply_text(
            "–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /password –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è."
        )
        return ConversationHandler.END
    
    message = update.message.reply_text("–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞...")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–≤–æ–¥–∞ (–±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç...)
    context.bot.send_chat_action(chat_id=chat_id, action="typing")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    success, output = ssh_manager.start_shell_session()
    
    if success:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        active_sessions[chat_id] = True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º
        keyboard = [
            [
                InlineKeyboardButton("Ctrl+C", callback_data="terminal_ctrl_c"),
                InlineKeyboardButton("Ctrl+D", callback_data="terminal_ctrl_d")
            ],
            [
                InlineKeyboardButton("Restart container", callback_data="terminal_restart_container"),
                InlineKeyboardButton("Reboot", callback_data="terminal_reboot")
            ],
            [InlineKeyboardButton("–í—ã—Ö–æ–¥ (exit)", callback_data="terminal_exit")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        ssh_manager.send_shell_command("export TERM=dumb")
        # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç—Ä–æ–∫–∏ (–∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–¥–æ–≤)
        ssh_manager.send_shell_command("set +o emacs")
        ssh_manager.send_shell_command("stty -echo")
        
        # –ü–æ–ª—É—á–∞–µ–º hostname –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        success, hostname = ssh_manager.send_shell_command("hostname")
        if not success or not hostname.strip():
            hostname = ssh_manager.server_ip
        
        # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ bash
        if output:
            output_lines = output.splitlines()
            # –£–¥–∞–ª—è–µ–º ANSI escape-–∫–æ–¥—ã –∏ –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            clean_lines = []
            for line in output_lines:
                # –£–¥–∞–ª—è–µ–º ANSI escape-–∫–æ–¥—ã (—Ü–≤–µ—Ç–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
                line = re.sub(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])', '', line)
                # –£–¥–∞–ª—è–µ–º –∫–æ–¥—ã readline –∏ –¥—Ä—É–≥–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                line = re.sub(r'\[\?[0-9]*[a-z]', '', line)
                # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ bash
                if not re.search(r'^[^:]*[\$#>]\s*$', line) and line.strip():
                    clean_lines.append(line)
            
            output = "\n".join(clean_lines)
        
        # –ú–µ–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ø–µ—Ö–∞
        output_text = f"‚úÖ **–¢–µ—Ä–º–∏–Ω–∞–ª –∑–∞–ø—É—â–µ–Ω**\n"
        output_text += f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω –∫: `{hostname.strip()}`\n"
        output_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{ssh_manager.username}`\n\n"
        
        if output:
            output_text += f"```\n{output}\n```\n\n"
            
        output_text += "üíª *–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è*\n"
        output_text += "üî¥ –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exit –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
        
        message.edit_text(
            output_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        return TERMINAL_MODE
    else:
        message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª:\n```\n{output}\n```", parse_mode=ParseMode.MARKDOWN)
        return ConversationHandler.END

def terminal_callback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
    query = update.callback_query
    query.answer()
    
    if not check_authorization(update):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    chat_id = update.effective_chat.id
    
    if query.data == "terminal_exit":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É exit –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        ssh_manager.send_shell_command("exit")
        ssh_manager.stop_shell_session()
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        if chat_id in active_sessions:
            del active_sessions[chat_id]
        
        query.edit_message_text("–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return ConversationHandler.END
    
    elif query.data == "terminal_ctrl_c":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Ctrl+C –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        ssh_manager.shell.send("\x03")
        context.bot.send_message(
            chat_id=chat_id,
            text="*–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª:* `Ctrl+C`",
            parse_mode=ParseMode.MARKDOWN
        )
        return TERMINAL_MODE
    
    elif query.data == "terminal_ctrl_d":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Ctrl+D –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        ssh_manager.shell.send("\x04")
        context.bot.send_message(
            chat_id=chat_id,
            text="*–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª:* `Ctrl+D`",
            parse_mode=ParseMode.MARKDOWN
        )
        return TERMINAL_MODE
    
    elif query.data == "terminal_restart_container":
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        context.bot.send_message(
            chat_id=chat_id,
            text="üîÑ *–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:* `docker compose up -d --build`",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–≤–æ–¥–∞
        context.bot.send_chat_action(chat_id=chat_id, action="typing")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        success, output = ssh_manager.send_shell_command("docker compose up -d --build")
        
        if success:
            context.bot.send_message(
                chat_id=chat_id,
                text="‚úÖ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã*\n```\n" + (output or "–ù–µ—Ç –≤—ã–≤–æ–¥–∞") + "\n```",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:*\n```\n" + output + "\n```",
                parse_mode=ParseMode.MARKDOWN
            )
        
        return TERMINAL_MODE
    
    elif query.data == "terminal_reboot":
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        context.bot.send_message(
            chat_id=chat_id,
            text="üîÑ *–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:* `reboot`\n‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="terminal_reboot_confirm"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="terminal_reboot_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞*\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        return TERMINAL_MODE
    
    elif query.data == "terminal_reboot_confirm":
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        ssh_manager.send_shell_command("reboot")
        
        context.bot.send_message(
            chat_id=chat_id,
            text="üîÑ *–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...*\n–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
        ssh_manager.stop_shell_session()
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        if chat_id in active_sessions:
            del active_sessions[chat_id]
        
        return ConversationHandler.END
    
    elif query.data == "terminal_reboot_cancel":
        # –û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå *–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return TERMINAL_MODE
    
    elif query.data.startswith("terminal_cmd_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ callback_data
        cmd_name = query.data.replace("terminal_cmd_", "")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –∫ –∫–æ–º–∞–Ω–¥–∞–º
        command_map = {
            "ls": "ls -la --color=never",
            "ps": "ps aux | head -20",
            "top": "top -n 1 -b",
            "htop": "htop -C -n 1",
            "df": "df -h",
            "free": "free -h",
            "uptime": "uptime",
            "w": "w",
            "netstat": "netstat -tuln",
            "ifconfig": "ifconfig || ip a"
        }
        
        command = command_map.get(cmd_name, cmd_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥
        context.bot.send_message(
            chat_id=chat_id,
            text=f"*–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:* `{command}`",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–≤–æ–¥–∞
        context.bot.send_chat_action(chat_id=chat_id, action="typing")
        
        success, output = ssh_manager.send_shell_command(command)
        
        if success:
            if not output.strip():
                output = "[–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–µ—Ç –≤—ã–≤–æ–¥–∞]"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –Ω–∞ —á–∞—Å—Ç–∏
            if len(output) > 4000:
                parts = []
                for i in range(0, len(output), 4000):
                    parts.append(output[i:i+4000])
                
                for part in parts:
                    context.bot.send_message(
                        chat_id=chat_id,
                        text=f"```\n{part}\n```",
                        parse_mode=ParseMode.MARKDOWN
                    )
            else:
                context.bot.send_message(
                    chat_id=chat_id,
                    text=f"```\n{output}\n```",
                    parse_mode=ParseMode.MARKDOWN
                )
        else:
            context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:\n```\n{output}\n```",
                parse_mode=ParseMode.MARKDOWN
            )
    
    return TERMINAL_MODE

def terminal_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    if not check_authorization(update):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è
    if chat_id not in active_sessions:
        update.message.reply_text("–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é /terminal")
        return ConversationHandler.END
    
    command = update.message.text
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    success, output = ssh_manager.send_shell_command(command)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if not success:
        update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n```\n{output}\n```",
            parse_mode='Markdown'
        )
        return TERMINAL_MODE
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
    if output:
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        max_length = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        
        if len(output) <= max_length:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            try:
                update.message.reply_text(
                    f"```\n{output}\n```",
                    parse_mode='Markdown'
                )
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ —Ä–∞–∑–º–µ—Ç–∫–∏), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
                update.message.reply_text(output)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –Ω–∞ —á–∞—Å—Ç–∏
            parts = [output[i:i+max_length] for i in range(0, len(output), max_length)]
            
            for i, part in enumerate(parts):
                if i == 0:
                    update.message.reply_text(
                        f"–ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n```\n{part}\n```",
                        parse_mode='Markdown'
                    )
                else:
                    context.bot.send_message(
                        chat_id=chat_id,
                        text=f"–ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n```\n{part}\n```",
                        parse_mode='Markdown'
                    )
    else:
        # –ï—Å–ª–∏ –≤—ã–≤–æ–¥–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        update.message.reply_text("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–Ω–µ—Ç –≤—ã–≤–æ–¥–∞)")
    
    return TERMINAL_MODE

def status_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    if not check_authorization(update):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    message = update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not ssh_manager.client:
        if not ssh_manager.connect():
            message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    success, uptime = ssh_manager.execute_command("uptime")
    if not success:
        message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–µ—Ä–µ.")
        return
    
    success, disk = ssh_manager.execute_command("df -h | grep -v tmpfs")
    success2, memory = ssh_manager.execute_command("free -h")
    
    status_text = f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ ({ssh_manager.server_ip}):\n\n"
    status_text += f"–ê–ø—Ç–∞–π–º:\n```\n{uptime.strip()}\n```\n\n"
    
    if success:
        status_text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:\n```\n{disk.strip()}\n```\n\n"
    
    if success2:
        status_text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:\n```\n{memory.strip()}\n```"
    
    message.edit_text(status_text, parse_mode=ParseMode.MARKDOWN)

def request_password(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è SSH"""
    if not check_authorization(update):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n"
        "–í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
    )
    return WAITING_PASSWORD

def receive_password(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏ –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞"""
    if not check_authorization(update):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    password = update.message.text
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    ssh_manager.set_password(password)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        update.message.delete()
    except Exception as e:
        logger.warning(f"Could not delete message with password: {e}")
    
    update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /terminal –∏–ª–∏ /cmd")
    
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è"""
    if not check_authorization(update):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
def handle_menu_buttons(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    if not check_authorization(update):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    command = update.message.text
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    is_terminal_active = chat_id in active_sessions
    
    if command == "Ctrl+C":
        if is_terminal_active and ssh_manager.shell:
            ssh_manager.shell.send("\x03")
            update.message.reply_text("*–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª:* `Ctrl+C`", parse_mode=ParseMode.MARKDOWN)
        else:
            update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /terminal")
    
    elif command == "Ctrl+D":
        if is_terminal_active and ssh_manager.shell:
            ssh_manager.shell.send("\x04")
            update.message.reply_text("*–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª:* `Ctrl+D`", parse_mode=ParseMode.MARKDOWN)
        else:
            update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /terminal")
    
    elif command == "Restart container":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        if not ssh_manager.client and not ssh_manager.connect():
            update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return
        
        message = update.message.reply_text("üîÑ *–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:* `docker compose up -d --build`", parse_mode=ParseMode.MARKDOWN)
        context.bot.send_chat_action(chat_id=chat_id, action="typing")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_shell_command –≤–º–µ—Å—Ç–æ execute_command –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if is_terminal_active and ssh_manager.shell:
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            success, output = ssh_manager.send_shell_command("cd /root/ssh-tg && docker compose up -d --build")
        else:
            # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            if ssh_manager.connect():
                temp_active = True
                ssh_manager.start_shell_session()
                success, output = ssh_manager.send_shell_command("cd /root/ssh-tg && docker compose up -d --build")
                ssh_manager.stop_shell_session()
                temp_active = False
            else:
                success = False
                output = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        
        if success:
            message.edit_text("‚úÖ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã*\n```\n" + (output or "–ù–µ—Ç –≤—ã–≤–æ–¥–∞") + "\n```", parse_mode=ParseMode.MARKDOWN)
        else:
            message.edit_text("‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:*\n```\n" + output + "\n```", parse_mode=ParseMode.MARKDOWN)
    
    elif command == "Reboot":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        if not ssh_manager.client and not ssh_manager.connect():
            update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="reboot_confirm"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="reboot_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            "‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞*\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

def general_callback_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ –≤–Ω–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    query = update.callback_query
    query.answer()
    
    if not check_authorization(update):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    chat_id = update.effective_chat.id
    
    if query.data == "reboot_confirm":
        if not ssh_manager.client and not ssh_manager.connect():
            query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ interactive shell
        query.edit_message_text("üîÑ *–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏...*", parse_mode=ParseMode.MARKDOWN)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        ssh_manager.start_shell_session()
        ssh_manager.send_shell_command("reboot")
        ssh_manager.stop_shell_session()
        
        query.edit_message_text("üîÑ *–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...*\n"
                               "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞.",
                               parse_mode=ParseMode.MARKDOWN)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        ssh_manager.disconnect()
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        active_sessions.clear()
    
    elif query.data == "reboot_cancel":
        query.edit_message_text("‚ùå *–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*", parse_mode=ParseMode.MARKDOWN)

def get_terminal_inline_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    keyboard = [
        [
            InlineKeyboardButton("Ctrl+C", callback_data="terminal_ctrl_c"),
            InlineKeyboardButton("Ctrl+D", callback_data="terminal_ctrl_d")
        ],
        [
            InlineKeyboardButton("Restart container", callback_data="terminal_restart_container"),
            InlineKeyboardButton("Reboot", callback_data="terminal_reboot")
        ],
        [InlineKeyboardButton("–í—ã—Ö–æ–¥ (exit)", callback_data="terminal_exit")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_terminal_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    keyboard = [
        [KeyboardButton("/terminal"), KeyboardButton("/cmd")],
        [KeyboardButton("/status"), KeyboardButton("/password")],
        [KeyboardButton("Ctrl+C"), KeyboardButton("Ctrl+D")],
        [KeyboardButton("Restart container"), KeyboardButton("Reboot")],
        [KeyboardButton("/help")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
    updater = Updater(TELEGRAM_TOKEN, request_kwargs={'read_timeout': 30, 'connect_timeout': 30})

    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è
    password_handler = ConversationHandler(
        entry_points=[CommandHandler("password", request_password)],
        states={
            WAITING_PASSWORD: [MessageHandler(Filters.text & ~Filters.command, receive_password)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    terminal_handler = ConversationHandler(
        entry_points=[CommandHandler("terminal", start_terminal)],
        states={
            TERMINAL_MODE: [
                MessageHandler(Filters.text & ~Filters.command, terminal_command),
                CommandHandler("exit", lambda u, c: ConversationHandler.END),
                CallbackQueryHandler(terminal_callback, pattern="^terminal_")
            ]
        },
        fallbacks=[CommandHandler("exit", lambda u, c: ConversationHandler.END)]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", start))
    dispatcher.add_handler(CommandHandler("connect", connect_command))
    dispatcher.add_handler(CommandHandler("disconnect", disconnect_command))
    dispatcher.add_handler(CommandHandler("cmd", execute_command))
    dispatcher.add_handler(CommandHandler("status", status_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    dispatcher.add_handler(MessageHandler(
        Filters.regex('^(Ctrl\\+C|Ctrl\\+D|Restart container|Reboot)$') & ~Filters.command, 
        handle_menu_buttons
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∫–Ω–æ–ø–æ–∫ –≤–Ω–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    dispatcher.add_handler(CallbackQueryHandler(general_callback_handler, pattern="^reboot_"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è
    dispatcher.add_handler(password_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    dispatcher.add_handler(terminal_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –¥–æ –Ω–∞–∂–∞—Ç–∏—è Ctrl-C –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    updater.idle()

if __name__ == '__main__':
    main() 